int note[21][7]={                  /*标准频率对照表*/
    /*A-G大调降音*/  
    {221,248,278,294,330,371,416},             //A大调
    {248,278,294,330,371,416,467},             //B大调
    {131,147,165,175,196,221,248},             //C大调
    {147,165,175,196,221,248,278},             //D大调
    {165,175,196,221,248,278,294},             //E大调
    {175,196,221,248,278,294,330},             //F大调
    {196,221,248,278,294,330,371},             //G大调
    /*A-G大调标准音*/
    {441,495,556,624,661,742,833},
    {495,556,624,661,742,833,935},
    {262,294,330,350,393,441,495},
    {294,330,350,393,441,495,556},
    {330,350,393,441,495,556,624},
    {350,393,441,495,556,624,661},
    {393,441,495,556,624,661,742},
    /*A-G大调升音*/
    {882,990,1112,1178,1322,1484,1665},
    {990,1112,1178,1322,1484,1665,1859},
    {525,589,661,700,786,882,990},
    {589,661,700,786,882,990,1112},
    {661,700,786,882,990,1112,1178},
    {700,786,882,990,1112,1178,1322},
    {786,882,990,1112,1178,1322,1484},
    
    };

int buzzerPin = 13;              /*蜂鸣器引脚位置*/
    int BPM = 400;                  /*一拍的时间*/
    int Scale = 4;                  /*设置大调，A-Z分别对应1-7*/
    float rate = 0.1;               /*发声时间占一拍时间的比率*/
  
    int pitch[] =
    {
    2, 6, 4, 8, 9, 9, 20
    };
    int rise[] =
    {
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    };
    float mlength[] =
    {
    1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 2.000, 1.000, 1.000, 2.000, 0.500, 0.500, 0.500, 0.500, 1.000, 1.000, 1.000, 3.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 2.000, 1.000, 1.000, 2.000,
    };

void setup() {
      pinMode(buzzerPin,OUTPUT);
      
    }
    
    void loop() {
      int i;
      int Frequency;
      int toneTime,notoneTime;
      
      for(i = 0;i < sizeof(note) / sizeof(int);i++)
      {
        if(pitch[i] != 0)
        {
          Frequency = note[Scale + rise[i] * 7 ][pitch[i]];
          
          toneTime = mlength[i] * BPM * rate;
          notoneTime = mlength[i] * BPM - toneTime;
          
          tone(buzzerPin,Frequency);
          delay(toneTime);
          delay(notoneTime);
          noTone(buzzerPin);
        }
        
        else delay(BPM * mlength[i]);  
      }
    }